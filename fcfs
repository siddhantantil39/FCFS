#include<stdio.h>
#include <limits.h>



int delete(int ar[], int n, int key)  //helps find order
{ 
int index=-1;
int i;
for(i=0;i<n;i++)
    {
        if(ar[i]==key)
        {
            index = i;
            break;
        }
    }

    if(index != -1)
    {
        for(i = index; i < n - 1; i++)
        {
            ar[i] = ar[i+1];
        }
        
        printf("\n New Array : ");
        for(i = 0; i < n - 1; i++)
            printf("%d ",ar[i]);
       
    }
    

}


int find_min(int ar1[],int arr[], int n,int m)   //helps find order
{
    int i,d;
    int min_arr=INT_MAX;
    for(i=0;i<n;i++)
    {
  
        if (ar1[i] < min_arr) {
            min_arr = ar1[i];
        }
    }
    
    
    for(i=0;i<m+1;i++)
    {
        if(arr[i]==min_arr)
        d=i+1;
    }
    
    
    printf("\nsmallest at :%d\n",d);
    
    return(d);
  
}

int sum(int timee[], int m) //av. time calculates
{
    int sum=0; 
    int avg;
    
    for(int i=1;i<=m;i++)
    {
        sum+=timee[i];
    }
    avg=sum/m;
 
    return avg;
}


void iwait(int burst [],int arr[],int m,int waiting_or[]) //calculates waiting time and turn around time
{
    int i;
    int waiting[m];
    int total[m];
    total[waiting_or[0]]=arr[waiting_or[0]-1];
    int turna[m];
    turna[waiting_or[0]]=burst[waiting_or[0]];
        //printf("\n Service time for P4 is %d\n",total[waiting_or[0]]);
       // printf("\n order time for P4 is %d\n",waiting_or[0]);

    waiting[waiting_or[0]]=0;
    
    for(i=1;i<m;i++)
    {
        total[waiting_or[i]]=total[waiting_or[i-1]]+burst[waiting_or[i-1]-1];
        
    }
    
   for(i=0;i<m;i++)
    {
        printf("\n Service time for P%d is %d\n",i+1,total[i+1]);
    }
    
    
     for(i=1;i<m;i++)
    {
        waiting[waiting_or[i]]=total[waiting_or[i]]-arr[waiting_or[i]-1];
    }
    
    for(i=0;i<m;i++)
    {
        printf("\nWaiting for P%d is %d\n",i+1,waiting[i+1]);
    }
    
      for(i=1;i<m;i++)
    {
        turna[waiting_or[i]]=burst[waiting_or[i]-1]+waiting[waiting_or[i]];
    }
    
    for(i=0;i<m;i++)
    {
        printf("\n Turn around time for P%d is %d\n",i+1,turna[i+1]);
    }
    
    int av_wt=sum(waiting,m);
    int av_tt=sum(turna,m);
    printf("\nAv. waiting time is: %d\n",av_wt);
    printf("\nAv. turnaround time is: %d\n",av_tt);

}
    
 
    int waiting_order(int burst[],int arr[], int n)   //FCFS process order
    {   int i,j,a,m;
        m=n;
        int waiting_or[n];
        //waiting_or[0]=0;
        int order[n];
         for (i=0;i<n;i++)
        {
            order[i]=arr[i];
        }
        
        for(i=0;i<m;i++)
        {
            j=find_min(order,arr,n,m);
           // printf("\n I is=%d",i);
            waiting_or[i]=j;
            //printf("\n n is : %d\n ",n);
            printf("\n key is: %d\n",order[j-1]);
            delete(order,n--,order[j-1]);
            
        }
        
     for(i=0;i<m;i++)
     {
         printf("\norder is: %d\t",waiting_or[i]);
     }
     
     iwait(burst,arr,m,waiting_or);
    }
    
    

    
    
    





void display_process(int p[],int burst[],int arr[], int n)
{
    int i;
    printf("Process name \t Burst time \t Arrival time\n");
    for(i=0;i<n;i++)
    {
        printf("%d \t\t",p[i]);
         
        printf(" %d \t\t",burst[i]);
         
        printf(" %d \n",arr[i]);

    }

}



void add_processes(int n)
{
    printf("Hey\n");
    int i;
    int p[n];
    int burst[n];
    int arr[n];
            printf("Enter the processes name\n");

    for(i=0;i<n;i++)
    {
        scanf("%d",&p[i]);

    }
             printf("Enter the processes Burst time\n");

        for(i=0;i<n;i++)
    {
        
        scanf("%d",&burst[i]);

    }  
             printf("Enter the processes Arrival time\n");

    
    for(i=0;i<n;i++)
    {
    
        scanf("%d",&arr[i]);

    }
    display_process(p,burst,arr,n);
    waiting_order(burst,arr,n);

}


int main()
{
    int i;
    int n;
    printf("Enter the number of processes\n");
    scanf("%d",&n);
    add_processes(n);
    return 0;
}
